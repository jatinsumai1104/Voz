# -*- coding: utf-8 -*-
"""sih.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bRpgxG2wr6KPHSJUWR4yoI5BjDLsgrVh
"""

from nltk.tokenize import PunktSentenceTokenizer
import json
pk= PunktSentenceTokenizer()
prx="Ms Mansi Verma age 15 years old is a gymnast She tends to be sore often due to hand muscle strain it is suggested for her to change her regulars dosage from not have Aspirin 2 mg take Ibuprofen 5 mg patient takes the drug more than a average person should which can have serious effects on the lever"
prx="Recording for Mr Sharat Sharma age 30 years old The patient is been suffering from symptoms like dry cough for 3 days running nose but has no fever I have diagnosed him to have acute bronchitis the medical prescription would be Azithromycin 500 mg once a day for 3 days and Robitussin 5ml thrice a on empty stomach daily patient is also adviced to drink warm water and not to eat grapes"
#prx="Ms Prachi Shah has been suffering from symptoms abdominal pain dark urination vomiting and yellow tinge to skin my diagnosis is a case of Jaundice the medical prescription would be Livolexin 1 mg and Collacast Z 1 mg 3 doses daily for 2 weeks"
def nlp(prx):
  prx=prx.replace("daily","QD")
  prx=prx.replace("every other day","QOD")
  prx=prx.replace("empty stomach","EM")
  prx=prx.replace("once a day","QD")
  prx=prx.replace("once","QD")
  prx=prx.replace("thrice a day","TID")
  prx=prx.replace("thrice","TID")
  tokenized=pk.tokenize(prx)
  med=["AZITHROMYCIN","ROBITUSSIN","ASPIRIN","IBUPROFEN","LIVOLEXIN","COLLACAST","Z"]
  dis=["JAUNDICE","ACUTE","BRONCHITIS"]
  sym=["COUGH","FEVER"]
  typ=["TAB","TABS","TABLET","SYRUP","CAPSULE","CAPSULES","INJECTION","SYRING","CREAM","POWDER","DOSES"]
  quant=["MG","ML"]  
  dose=["QD","QOD","QID","BID","TID","TIMES","EM","ONCE"]
  time=["WEEKS","WEEKS","DAY","DAYS","YEARS","YEAR","MONTH","MONTHS"]
  idt=["MISS","MS","MRS","MR","MASTER","MISTER","MISSESS"]
  keywords=["SYMPTOMS","SYMPTOM","COMPLAIN","COMPLAINING","PRESCRIPTION","EXAMINED","DIAGNOSIS","DIAGNOSED","ADVICE","ADVICED","SUGGESTED","SUGGESTION","RECCOMENDATION"]
  nl=[]
  for i in tokenized:
    words = nltk.word_tokenize(i)
    tagged = nltk.pos_tag(words)
    for t in tagged:
      if t[0].upper() in med:
        a=(t[0],'MED')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in dis:
        a=(t[0],'DIS')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in quant:
        a=(t[0],'QQ')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in typ:
        a=(t[0],'TYP')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in dose:
        a=(t[0],'DOS')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in time:
        a=(t[0],'TIM')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in sym:
        a=(t[0],'SYM')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in keywords:
        a=(t[0],'KEY')
        tagged[tagged.index(t)]=a
      elif t[0].upper() in idt:
        a=(t[0],'IDT')
        tagged[tagged.index(t)]=a
      elif t[0].upper() == "AGE":
        a=(t[0],'AGE')
        tagged[tagged.index(t)]=a
    nl+=[tagged]
  print(nl)
  rule=r"""
  RL: {<MED>+<CD>*<QQ>*<TYP>*}
      {<DOS><IN><CD><TIM>}
      {<DOS>+<DT>*<IN>*<DT>*<DOS>+}
      {<DIS>+}
      {<SYM>+}
      {<AGE>?<CD><TIM>*<JJ.?>*}
      {<JJ.?><NN.?>+}
      {<IDT><NN.?><NN.?>}
      {<RB>*<TO>?<VB.?>*<JJ.?>*<NN.?>+}
      {<KEY>+}
  """
  res=[]
  for i in nl:
    # chunkGram = r"""
    # Chunk:  {<MID>+<CD>+}
    #         {<RB.?>*<VB.?>*<NNP>+<NN>?}
    #         {<NNP>+}
    #         {<NN>+}
    #         {<RB>+<VB>*<NNP>+}
    # """
    #print(chunkGram)                
    chunkParser = nltk.RegexpParser(rule)
    chunked = chunkParser.parse(i)
    #print(chunked)
    for subtree in chunked.subtrees(filter=lambda t: t.label() == 'RL'):
      # print the noun phrase as a list of part-of-speech tagged words
      ls1=[]
      ls2=[]
      ls=[]
      for i,p in subtree.leaves():
        ls1+=[i]
        ls2+=[p]
      ls1=" ".join(ls1)
      ls+=[ls1,ls2]

      res+=[ls]
  result={}
  result['diagnosis']=[]
  result['symptoms']=[]
  result['advice']=[]
  result['prescription']=[]
  flg=""
  for st,pos in res:

    if "KEY" in pos:
      if st.upper() in ["SYMPTOMS","SYMPTOM","COMPLAIN","COMPLAINING"]:
        flg="s"
      elif st.upper() in ["ADVICE","ADVICED","SUGGESTED","SUGGESTION","RECCOMENDATION"]:
        flg="a"
      else:
        flg=""
    if "IDT" in pos:
      result['name']=st
      s=st.split()[0]
      if s in ["Miss", "Ms","Mrs","Missess"]:
        result['gender']="Female"
      else:
        result['gender']="Male"
    if "DIS" in pos:
      result['diagnosis']+=[st]
    if "SYM" in pos:
      result['symptoms']+=[st]
    if "AGE" in pos:
      for s in st.split():
        if s.isnumeric():
          result['age']=s
    if flg=="s":
      result['symptoms']+=[st]
    if "MED" in pos:
      result['prescription']+=[st]
    if "DOS" in pos:
      result['prescription']+=[st] 
    if flg=="a":
      result['advice']+=[st]

  result=json.dumps(result)
  return result